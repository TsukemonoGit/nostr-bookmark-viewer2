<script>
	import { page } from '$app/stores';
	import { onMount } from 'svelte';

	import { nip19 } from 'nostr-tools';
	import {
		formatBookmark,
		formatPubkeyList,
		getBookmarks,
		getEvent,
		getProfile,
		noteToHex,
		postEvent,
		removeEvent
	} from '../../lib/functions';
	import {
		AppBar,
		AppShell,
		ListBox,
		ListBoxItem,
		ProgressRadial,
		Tab,
		TabGroup,
		Toast,
		popup,
		toastStore
	} from '@skeletonlabs/skeleton';

	import PopupMenu from '../PopupMenu.svelte';
	import AddNoteDialog from '../AddNoteDialog.svelte';

	let pubkey = '';
	let relay = '';
	/**
	 * @type {import('nostr-tools').Event[]}
	 */
	let bookmarks = [];

	let tabSet = '';
	/**
	 * @type {{ [x: string]: string[]}}　タグごとのイベントIDリスト
	 */
	let bookmarkList = {};

	/**@type {{ [key:string]:import('nostr-tools').Event}} */
	let eventList = {};
	/**@type {string[]} */
	let idList = [];

	/**@type {{ [key:string]:import('nostr-tools').Event | ''}} */
	let localProfile = {};

	/**
	 * @type {{ pubkey: string; icon:string ; id: string ; name: string; display_name:string;date:string;content:string; isMenuOpen:boolean}[] }
	 */
	let viewItem;
	//イベント内容検索用リレーたち
	let RelaysforSeach = [
		//"wss://relay.nostr.band",
		//"wss://nostr.wine",
		//"wss://universe.nostrich.land",
		//"wss://relay.damus.io",
		//'wss://nostream.localtest.me',
		'ws://localhost:7000'
	];

	//まずうらるを確認してnpubとrelayをとります
	//（次へから来てない可能性もあるため）
	// @ts-ignore
	//$: viewTest = bookmarkList[tabSet]; //タブセットによって変わるのを検知して変わる

	//コンポーネントが最初に DOM にレンダリングされた後に実行されます(?)
	onMount(async () => {
		try {
			const address = nip19.decode($page.params.naddr);
			// @ts-ignore
			pubkey = address.data.pubkey;
			// @ts-ignore
			relay = address.data.relays[0];
			//console.log(pubkey);
			//console.log(relay);

			bookmarks = await getBookmarks(pubkey, relay);
			console.log(bookmarks);
			tabSet = bookmarks[0].tags[0][1];
			
			bookmarkList = formatBookmark(bookmarks);
			console.log(bookmarkList);
			/**
			 * @type {string[]}
			 */
			idList = [];
			for (const key in bookmarkList) {
				idList = [...idList, ...bookmarkList[key]];
			}
			console.log(idList);
			eventList = await collectEvents(idList);
			try {
				viewItem = arrangeEvents(idList);
			} catch (error) {
				console.log(error);
			}
		} catch {
			const errorMessage = 'naddr decode error';
			console.log(errorMessage);
		}
	});

	/**
	 * @param {string[] } idList
	 */
	async function collectEvents(idList) {
		//localStrageちぇっく-------------------------------------

		const eventList = await getEvent(idList, RelaysforSeach);
		console.log(eventList);
		const pubkeyList = await formatPubkeyList(eventList);
		console.log(pubkeyList);
		//localStrageちぇっく-------------------------------------
		let getPubkeyList = pubkeyList;
		const localtmp = localStorage.getItem('profile');
		/**@type {{[key:string]:import('nostr-tools').Event|""}}*/

		if (localtmp != null) {
			localProfile = JSON.parse(localtmp);
			//delete localProfile['undefined'];
			console.log(localProfile);
			for (const key in localProfile) {
				if (pubkeyList.includes(key) && localProfile[key] != '') {
					const index = getPubkeyList.indexOf(key);
					getPubkeyList.splice(index, 1);
				}
			}
		}
		let profiles = {};
		console.log(getPubkeyList[0] !== undefined);
		if (getPubkeyList.length > 0 && getPubkeyList[0] !== undefined) {
			profiles = await getProfile(getPubkeyList, RelaysforSeach); //key=pubkey,value=profile
		}
		localProfile = { ...localProfile, ...profiles };

		localStorage.setItem('profile', JSON.stringify(localProfile));
		console.log(localProfile);
		return eventList;
		//ととのえる
	}
	//イベントIDごとに情報をまとめる
	/**
	 * @param {string[]} _idList
	 */
	function arrangeEvents(_idList) {
		let notes = [];
		for (let i = 0; i < _idList.length; i++) {
			const thisId = _idList[i];
			const author = eventList[thisId].pubkey;
			console.log(localProfile[author]);

			notes[i] = {
				id: nip19.noteEncode(thisId),
				content: eventList[thisId].content,
				date: new Date(eventList[thisId].created_at * 1000).toLocaleString(),
				pubkey: 'unknown',
				name: 'unknown',
				display_name: 'unknown',
				icon: 'unknown',
				isMenuOpen: false //メニューの開閉状態
			};
			try {
				notes[i].pubkey = nip19.npubEncode(author);
			} catch {}
			try {
				// @ts-ignore
				const thisProfile = JSON.parse(localProfile[author].content);
				notes[i].name = thisProfile.name;
				notes[i].display_name = thisProfile.display_name;
				notes[i].icon = thisProfile.picture;
			} catch {}
		}
		console.log(notes);
		return notes;
	}

	/**@type {import('@skeletonlabs/skeleton').PopupSettings}*/
	let comboboxValue;
	/**@type {import('@skeletonlabs/skeleton').PopupSettings}*/
	let popupSettings = {
		event: 'focus-click',
		target: 'combobox'
		//placement: 'bottom',
		// Close the popup when the item is clicked
		//closeQuery: '.listbox-item'
	};
	/**
	 * @type {string}
	 */
	let nowViewID;
	/**
	 * @param {string} _id
	 */
	function onClickMenu(_id) {
		// @ts-ignore
		viewItem[idList.indexOf(_id)].isMenuOpen = !viewItem[idList.indexOf(_id)].isMenuOpen;
		if (viewItem[idList.indexOf(_id)].isMenuOpen) {
			nowViewID = _id;
		}
		console.log(viewItem[idList.indexOf(_id)].isMenuOpen);
	}

	/**
	 * @param {CustomEvent} item
	 */
	async function handleItemClick(item) {
		console.log(item.detail.name, nowViewID);
		switch (item.detail.name) {
			case 'copy':
				navigator.clipboard.writeText(viewItem[idList.indexOf(nowViewID)].id).then(
					() => {
						// コピーに成功したときの処理
						console.log(`copyed: ${viewItem[idList.indexOf(nowViewID)].id.slice(0, 15)}...`);
						/**@type {import('@skeletonlabs/skeleton').ToastSettings}*/
						const t = {
							message: `copyed: ${viewItem[idList.indexOf(nowViewID)].id.slice(0, 15)}...`,
							timeout: 3000
						};
						toastStore.trigger(t);
					},
					() => {
						// コピーに失敗したときの処理
						console.log('コピー失敗');
						/**@type {import('@skeletonlabs/skeleton').ToastSettings}*/
						const t = {
							message: 'failed to copy',
							timeout: 3000
						};
						toastStore.trigger(t);
					}
				);
				break;
			case 'open':
				window.open('https://nostx.shino3.net/' + viewItem[idList.indexOf(nowViewID)].id, '_blank');
				break;
			case 'delete':
				/**@type {number}*/

				/**@type {import('@skeletonlabs/skeleton').ToastSettings}*/
				const t = await {
					message: `delete note (${viewItem[idList.indexOf(nowViewID)].id.slice(0, 10)}...)`,
					action: {
						label: 'DELETE',
						response: () => deleteNote()
					},
					timeout: 10000

					//background:
					//	'bg-gradient-to-tr from-indigo-500 via-purple-500 to-pink-500 text-white width-filled'
				};
				toastStore.trigger(t);
				break;
			default:
				viewItem[idList.indexOf(nowViewID)].isMenuOpen = false;
				break;
		}
	}

	function viewUpdate(){

	}



	//$:console.log(nowTag);
	
	async function deleteNote() {
		console.log(nowViewID);
		console.log(bookmarks.length);
		console.log(nowBookmarkIndex);
		console.log(bookmarks);
		const event = await removeEvent(nowViewID, bookmarks[nowBookmarkIndex], [relay]);
		console.log(nowBookmarkIndex);
		console.log(bookmarks);
		console.log(event);
		if (event != null) {
			bookmarks[nowBookmarkIndex] = event;
			bookmarkList = formatBookmark(bookmarks);
		} else {
			console.log('削除に失敗したかも');
			/**@type {import('@skeletonlabs/skeleton').ToastSettings}*/
			const t = {
				message: 'failed to delete',
				timeout: 3000
			};
			toastStore.trigger(t);
		}
	}

	/**
	 * @type {AddNoteDialog.dialog}
	 */
	let dialog;

	function openDialog() {
		dialogMessage = '';
		dialog.showModal();
		dialog.addEventListener('click', function (event) {
			if (event.target === dialog) {
				//nowLoading=false;
				dialog.close();
			}
		});
	}

	function closeDialog() {
		//nowLoading=false;
		dialog.close();
	}

	/**
	 * @type {boolean}
	 */
	let nowLoading;
	let dialogMessage = '';
	async function addNote(item) {
		console.log(item.detail);
		//追加作業中プログレスアイコン表示しておいて

		let noteID;
		try {
			noteID = noteToHex(item.detail);
		} catch {
			dialogMessage = 'error: noteIDを確認してください';
			return;
		}
		nowLoading = true;
		//await add note...
		const event = await postEvent(noteID, bookmarks[nowBookmarkIndex], [relay]);
		if (event != null) {
			//色んな情報を更新します------------------ぐちゃぐちゃぽいんと
			idList.push(noteID);
			console.log(nowBookmarkIndex);
		console.log(bookmarks);
			const thisEvent = await collectEvents([noteID]);
			eventList = { ...eventList, ...thisEvent };
			const thisItem = arrangeEvents([noteID]);
			console.log(nowBookmarkIndex);
		console.log(bookmarks);
			// @ts-ignore
			viewItem.push(thisItem[0]);
			for (let i = 0 ; i < bookmarks.length ; i++){
			if(bookmarks[i].tags[0][1]==event.tags[0][1])
				bookmarks[nowBookmarkIndex] = event;}
			console.log(bookmarks.length);
			bookmarkList = formatBookmark(bookmarks);
			nowLoading = false;
			dialog.close();
		} else {
			console.log('追加に失敗したかも');
			/**@type {import('@skeletonlabs/skeleton').ToastSettings}*/
			const t = {
				message: 'failed to add note',
				timeout: 3000
			};
			toastStore.trigger(t);
		}
		//dialog.close();
		//終わったらアイコン消して
		nowLoading = false;
		dialog.close();
	}
</script>

<Toast />
<div>
	<ul class="list-dl">
		<li>
			pubkey: {pubkey}
		</li>
		<li>
			relay: {relay}
		</li>
	</ul>
</div>
<hr />

{#await getBookmarks}
	<ProgressRadial ... stroke={100} meter="stroke-primary-500" track="stroke-primary-500/30" />
{:then book}
	<TabGroup>
		{#each bookmarks as bookmark}
			<Tab bind:group={tabSet} name={bookmark.tags[0][1]} value={bookmark.tags[0][1]}
				>{bookmark.tags[0][1]}</Tab
			>
		{/each}
		<!-- Tab Panels --->

		<svelte:fragment slot="panel">
			{#if viewItem != null}
				{#each bookmarkList[tabSet] as id, index}
					<div class="note">
						<AppShell>
							<svelte:fragment slot="sidebarLeft">
								<div class="icon-area">
									<img class="icon" src={viewItem[idList.indexOf(id)].icon} alt="icon" />
								</div>
							</svelte:fragment>

							<svelte:fragment slot="pageHeader">
								<div class="header">
									<div class="display_name">
										{viewItem[idList.indexOf(id)].display_name}
									</div>
									<div class="name">@{viewItem[idList.indexOf(id)].name}</div>
									<div class="date">{viewItem[idList.indexOf(id)].date}</div>
								</div>
							</svelte:fragment>

							<svelte:fragment slot="sidebarRight">
								<button
									class="btn1 btn-icon btn-icon-sm variant-filled-primary"
									on:click={onClickMenu(id)}
									style="position:relative">▼</button
								>

								{#if viewItem[idList.indexOf(id)].isMenuOpen}
									<PopupMenu on:item-click={handleItemClick} />
								{/if}
							</svelte:fragment>

							<!-- Router Slot -->
							<slot>
								{viewItem[idList.indexOf(id)].content}
							</slot>

							<!-- ---- / ---- -->
						</AppShell>
					</div>
				{/each}
			{/if}
		</svelte:fragment>
	</TabGroup>
{/await}

<div class="footer-menu">
	<button class="btn variant-filled-secondary footer-btn" on:click={openDialog}>add note</button>

	<button class="btn variant-filled-secondary footer-btn">edit tag</button>
</div>

<AddNoteDialog
	bind:dialog
	on:closeDialog={closeDialog}
	on:add={addNote}
	bind:nowLoading
	bind:dialogMessage
	bind:tabSet
/>

<style>
	.icon-area {
		margin-right: 1em;
	}
	.icon {
		width: 50px;
		height: 50px;
		border-radius: 50%;
	}
	.note {
		border: solid 1px rgb(88, 88, 88);
		word-break: break-all;
		margin: 0.5em;
		padding: 1em;
		border-radius: 0.5em;
	}
	.date {
		display: inline;
		font-weight: bold;
		font-size: smaller;
		margin-left: auto;
		text-align: end;
		margin-right: 5px;
	}
	.display_name {
		display: inline;
		font-weight: bold;
	}
	.name {
		display: inline;
		margin-left: 5px;
		font-weight: normal;
		font-size: smaller;
		align-items: flex-end;
	}
	.header {
		display: flex;
		width: 100%;
	}
	.btn1 {
		border-radius: 51em;
	}
	.footer-menu {
		display: block;
		position: fixed;
		left: 10px;
		bottom: 10px;
		z-index: 100;
	}
	.footer-btn {
		margin: 5px;
	}
</style>
